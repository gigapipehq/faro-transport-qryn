{"version":3,"sources":["../src/index.ts","../src/transport.ts","../src/payload/QrynPayload.ts","../src/payload/transform/transform.ts"],"sourcesContent":["export { QrynTransport } from './transport'\nexport type { QrynLokiTransportOptions, QrynLokiTransportRequestOptions } from './types'\n","/* eslint-disable no-restricted-syntax */\nimport {\n  BaseTransport,\n  createPromiseBuffer,\n  type PromiseBuffer,\n  type TransportItem,\n} from '@grafana/faro-core'\n\nimport { QrynPayload, type QrynTransportPayload } from './payload'\nimport type { QrynLokiTransportOptions } from './types'\n\nconst DEFAULT_BUFFER_SIZE = 30\nconst DEFAULT_CONCURRENCY = 5 // chrome supports 10 total, firefox 17\nconst DEFAULT_RATE_LIMIT_BACKOFF_MS = 5000\nconst LOKI_LOGS_ENDPOINT = '/loki/api/v1/push'\nconst OTLP_TRACES_ENDPOINT = '/v1/traces'\n\nexport class QrynTransport extends BaseTransport {\n  readonly name = '@gigapipe/faro-transport-qryn'\n\n  readonly version = '1.0.0'\n\n  private readonly promiseBuffer: PromiseBuffer<Response | void>\n\n  private readonly rateLimitBackoffMs: number\n\n  private readonly getNow: () => number\n\n  private sendingTracesDisabledUntil: Date = new Date()\n\n  private sendingLogsDisabledUntil: Date = new Date()\n\n  private logsURL: string\n\n  private tracesURL: string\n\n  constructor(private options: QrynLokiTransportOptions) {\n    super()\n    this.rateLimitBackoffMs = options.defaultRateLimitBackoffMs ?? DEFAULT_RATE_LIMIT_BACKOFF_MS\n    this.getNow = options.getNow ?? (() => Date.now())\n\n    // TODO: make this configurable through an option that controls the prefered ingestion API for each signal\n    this.logsURL = `${options.host}${LOKI_LOGS_ENDPOINT}`\n    this.tracesURL = `${options.host}${OTLP_TRACES_ENDPOINT}`\n\n    this.promiseBuffer = createPromiseBuffer({\n      size: options.bufferSize ?? DEFAULT_BUFFER_SIZE,\n      concurrency: options.concurrency ?? DEFAULT_CONCURRENCY,\n    })\n  }\n\n  send(item: TransportItem | TransportItem[]): void {\n    this.logDebug(`Sending item: ${JSON.stringify(item)}`)\n    const qrynPayload = new QrynPayload(this.internalLogger)\n    const items = Array.isArray(item) ? item : [item]\n\n    items.forEach(i => qrynPayload.addResourceItem(i))\n    this.logDebug('Current QrynPayload:', qrynPayload)\n    this.sendPayload(qrynPayload.getPayload())\n  }\n\n  private sendPayload(payload: QrynTransportPayload): void {\n    try {\n      for (const [key, value] of Object.entries(payload)) {\n        if (!QrynPayload.hasPayload(value)) {\n          this.logWarn(`Dropping transport item due to missing payload: ${JSON.stringify(value)}`)\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        let disabledUntil: Date | undefined\n        let updateDisabledUntil = (_: Date) => {}\n        let url = ''\n\n        switch (key) {\n          case 'resourceSpans':\n            url = this.tracesURL\n            disabledUntil = this.sendingTracesDisabledUntil\n            updateDisabledUntil = (retryAfterDate: Date) => {\n              this.sendingTracesDisabledUntil = retryAfterDate\n            }\n            break\n          case 'resourceLogs':\n            url = this.logsURL\n            disabledUntil = this.sendingLogsDisabledUntil\n            updateDisabledUntil = (retryAfterDate: Date) => {\n              this.sendingLogsDisabledUntil = retryAfterDate\n            }\n            break\n          default:\n            break\n        }\n\n        if (disabledUntil && disabledUntil > new Date(Date.now())) {\n          this.logWarn(\n            `Dropping transport item due to too many requests. Backoff until ${disabledUntil}`,\n          )\n          return undefined\n        }\n        this.logDebug(`Sending value: ${JSON.stringify(value)}`, `to ${url}`)\n\n        const body = JSON.stringify(value)\n\n        const { requestOptions, apiToken } = this.options\n        const { headers, ...restOfRequestOptions } = requestOptions ?? {}\n\n        this.promiseBuffer.add(() =>\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'x-api-token': apiToken,\n              ...(headers ?? {}),\n            },\n            body,\n            keepalive: true,\n            ...(restOfRequestOptions ?? {}),\n          })\n            .then(response => {\n              if (response.status === 429) {\n                updateDisabledUntil(this.getRetryAfterDate(response))\n                this.logWarn(`Too many requests, backing off until ${disabledUntil}`)\n              }\n\n              return response\n            })\n            .catch(error => {\n              this.logError('Failed sending payload to the receiver\\n', JSON.parse(body), error)\n            }),\n        )\n      }\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  override getIgnoreUrls(): Array<string | RegExp> {\n    const { tracesURL, logsURL } = this\n    return [tracesURL, logsURL].filter(Boolean)\n  }\n\n  private getRetryAfterDate(response: Response): Date {\n    const now = Date.now()\n    const retryAfterHeader = response.headers.get('Retry-After')\n\n    if (retryAfterHeader) {\n      const delay = Number(retryAfterHeader)\n\n      if (!Number.isNaN(delay)) {\n        return new Date(delay * 1000 + now)\n      }\n\n      const date = Date.parse(retryAfterHeader)\n\n      if (!Number.isNaN(date)) {\n        return new Date(date)\n      }\n    }\n\n    return new Date(now + this.rateLimitBackoffMs)\n  }\n}\n","import { type InternalLogger, type TransportItem, TransportItemType } from '@grafana/faro-core'\nimport compare from 'just-compare'\n\nimport { getLogTransforms, type LogsTransform, type LogTransportItem } from './transform'\nimport type { QrynTransportPayload } from './types'\n\nexport class QrynPayload {\n  private resourceLogs = { streams: [] } as QrynTransportPayload['resourceLogs']\n\n  // TODO: implement handling for TransportItemType.TRACE\n  // private resourceSpans = [] as QrynTransportPayload['resourceSpans']\n\n  private getLogTransforms: LogsTransform\n  // TODO: implement handling for TransportItemType.TRACE\n  // private getTraceTransforms: TraceTransform\n\n  constructor(private internalLogger: InternalLogger, transportItem?: TransportItem) {\n    this.internalLogger = internalLogger\n\n    this.getLogTransforms = getLogTransforms(this.internalLogger)\n    // TODO: implement handling for TransportItemType.TRACE\n    // this.getTraceTransforms = getTraceTransforms(this.internalLogger);\n\n    if (transportItem) {\n      this.addResourceItem(transportItem)\n    }\n  }\n\n  getPayload(): QrynTransportPayload {\n    return {\n      resourceLogs: this.resourceLogs,\n    } as const\n  }\n\n  addResourceItem(transportItem: TransportItem): void {\n    const { type } = transportItem\n\n    try {\n      switch (type) {\n        case TransportItemType.LOG:\n        case TransportItemType.EXCEPTION:\n        case TransportItemType.EVENT:\n        case TransportItemType.MEASUREMENT: {\n          const { toLogValue, toLogLabels } = this.getLogTransforms\n\n          const currentLogStream = toLogLabels(transportItem as LogTransportItem)\n\n          const existingResourceLogs = this.resourceLogs.streams.find(({ stream }) =>\n            compare(stream, currentLogStream),\n          )\n\n          if (existingResourceLogs) {\n            // Push the transportItem to the existing resource log\n            const logValue = toLogValue(transportItem as LogTransportItem)\n            if (logValue) existingResourceLogs.values.push(logValue)\n          } else {\n            // Push the transportItem to a new resource log\n            const logLabels = toLogLabels(transportItem as LogTransportItem)\n            const logValue = toLogValue(transportItem as LogTransportItem)\n\n            if (logLabels && logValue)\n              this.resourceLogs.streams.push({ stream: logLabels, values: [logValue] })\n          }\n\n          break\n        }\n        case TransportItemType.TRACE: {\n          this.internalLogger.error('Trace is not supported')\n          break\n        }\n        default:\n          this.internalLogger?.error(`Unknown TransportItemType: ${type}`)\n          break\n      }\n    } catch (error) {\n      this.internalLogger?.error(error)\n    }\n  }\n\n  static hasPayload(value: any): boolean {\n    if (value && value.streams && value.streams.length > 0) {\n      return true\n    }\n\n    return false\n  }\n}\n","/* eslint-disable consistent-return */\nimport {\n  EventEvent,\n  ExceptionEvent,\n  InternalLogger,\n  LogEvent,\n  LogLevel,\n  MeasurementEvent,\n  Meta,\n  TransportItem,\n  TransportItemType,\n} from '@grafana/faro-core'\n\nimport type { LogsTransform, LogTransportItem, LogValue } from './types'\n\nexport function getLogTransforms(internalLogger: InternalLogger): LogsTransform {\n  function toLogLogValue(payload: TransportItem<LogEvent>['payload']): LogValue {\n    // TODO: what to do with the trace?\n    const { timestamp, trace, level, ...log } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [timeUnixNano.toString(), JSON.stringify(log)]\n  }\n\n  function toErrorLogValue(payload: TransportItem<ExceptionEvent>['payload']): LogValue {\n    // TODO: what to do with the trace?\n    const { timestamp, trace, ...error } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [timeUnixNano.toString(), JSON.stringify(error)]\n  }\n\n  function toEventLogValue(payload: TransportItem<EventEvent>['payload']): LogValue {\n    // TODO: what to do with the trace?\n    const { timestamp, trace, ...event } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [timeUnixNano.toString(), JSON.stringify(event)]\n  }\n\n  function toMeasurementLogValue(payload: TransportItem<MeasurementEvent>['payload']): LogValue {\n    // TODO: what to do with the trace?\n    const { timestamp, trace, ...metric } = payload\n    const timeUnixNano = toTimeUnixNano(payload.timestamp)\n\n    return [timeUnixNano.toString(), JSON.stringify(metric)]\n  }\n\n  function toLogValue(transportItem: LogTransportItem) {\n    const { type, payload } = transportItem\n    switch (type) {\n      case TransportItemType.LOG:\n        return toLogLogValue(payload)\n      case TransportItemType.EXCEPTION:\n        return toErrorLogValue(payload)\n      case TransportItemType.EVENT:\n        return toEventLogValue(payload)\n      case TransportItemType.MEASUREMENT:\n        return toMeasurementLogValue(payload)\n      default:\n        internalLogger?.error(`Unknown TransportItemType: ${type}`)\n        return undefined\n    }\n  }\n\n  function toLogLabels(transportItem: LogTransportItem) {\n    const { type, payload, meta } = transportItem\n    switch (type) {\n      case TransportItemType.LOG:\n        return {\n          level: payload.level,\n          ...getBaseLabels(meta),\n        }\n      case TransportItemType.EXCEPTION:\n        return {\n          level: LogLevel.ERROR,\n          ...getBaseLabels(meta),\n        }\n      case TransportItemType.EVENT:\n        return {\n          level: LogLevel.INFO,\n          ...getBaseLabels(meta),\n        }\n      case TransportItemType.MEASUREMENT:\n        return {\n          level: LogLevel.INFO,\n          ...getBaseLabels(meta),\n        }\n      default:\n        internalLogger?.error(`Unknown TransportItemType: ${type}`)\n        return undefined\n    }\n  }\n\n  function toTimeUnixNano(timestamp: string): number {\n    return Date.parse(timestamp) * 1e6\n  }\n\n  function getBaseLabels(meta: Meta) {\n    // TODO: should we parse all meta object into labels by default?\n\n    return {\n      ...(meta.app && {\n        app: meta.app.name,\n        environment: meta.app.environment,\n        release: meta.app.release,\n      }),\n      ...(meta.browser && { browser_name: meta.browser.name }),\n      ...(meta.user && { user_id: meta.user.id }),\n    }\n  }\n\n  return { toLogValue, toLogLabels }\n}\n"],"mappings":"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","names":["import_faro_core","import_faro_core","compare"]}