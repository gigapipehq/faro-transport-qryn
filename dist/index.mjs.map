{"version":3,"sources":["../src/transport.ts","../src/payload/QrynPayload.ts","../src/payload/transform/transform.ts","../src/payload/attribute/attributeUtils.ts","../src/payload/config/config.ts","../src/payload/transform/utils.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport {\n  BaseTransport,\n  createPromiseBuffer,\n  type PromiseBuffer,\n  type TransportItem as FaroTransportItem,\n} from '@grafana/faro-core'\n\nimport { QrynPayload, type QrynTransportPayload } from './payload'\nimport type { GetLabelsFromMeta, QrynLokiTransportOptions, TransportItem } from './types'\n\nconst DEFAULT_BUFFER_SIZE = 30\nconst DEFAULT_CONCURRENCY = 5 // chrome supports 10 total, firefox 17\nconst DEFAULT_RATE_LIMIT_BACKOFF_MS = 5000\nconst LOKI_LOGS_ENDPOINT = '/loki/api/v1/push'\nconst TEMPO_TRACES_ENDPOINT = '/v1/traces'\n\nexport class QrynTransport extends BaseTransport {\n  readonly name = '@gigapipe/faro-transport-qryn'\n\n  readonly version = '1.0.0'\n\n  private readonly promiseBuffer: PromiseBuffer<Response | void>\n\n  private readonly rateLimitBackoffMs: number\n\n  private readonly getNow: () => number\n\n  private sendingTracesDisabledUntil: Date = new Date()\n\n  private sendingLogsDisabledUntil: Date = new Date()\n\n  private logsURL: string\n\n  private tracesURL: string\n\n  private getLabelsFromMeta?: GetLabelsFromMeta\n\n  constructor(private options: QrynLokiTransportOptions) {\n    super()\n    this.rateLimitBackoffMs = options.defaultRateLimitBackoffMs ?? DEFAULT_RATE_LIMIT_BACKOFF_MS\n    this.getNow = options.getNow ?? (() => Date.now())\n\n    // TODO: make this configurable through an option that controls the prefered ingestion API for each signal\n    this.logsURL = `${options.host}${LOKI_LOGS_ENDPOINT}`\n    this.tracesURL = `${options.host}${TEMPO_TRACES_ENDPOINT}`\n\n    this.getLabelsFromMeta = options.getLabelsFromMeta\n\n    this.promiseBuffer = createPromiseBuffer({\n      size: options.bufferSize ?? DEFAULT_BUFFER_SIZE,\n      concurrency: options.concurrency ?? DEFAULT_CONCURRENCY,\n    })\n  }\n\n  send(item: FaroTransportItem | FaroTransportItem[]): void {\n    this.logDebug(`Sending item: ${JSON.stringify(item)}`)\n    const qrynPayload = new QrynPayload(this.internalLogger, this.getLabelsFromMeta)\n    const items = Array.isArray(item) ? item : [item]\n\n    items.forEach(i => qrynPayload.addResourceItem(i as TransportItem))\n    this.logDebug('Current QrynPayload:', qrynPayload)\n    this.sendPayload(qrynPayload.getPayload())\n  }\n\n  private sendPayload(payload: QrynTransportPayload): void {\n    try {\n      for (const [key, value] of Object.entries(payload)) {\n        if (!QrynPayload.hasPayload(value)) {\n          this.logWarn(`Dropping transport item due to missing payload: ${JSON.stringify(value)}`)\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        let disabledUntil: Date | undefined\n        let updateDisabledUntil = (_: Date) => {}\n        let url = ''\n\n        switch (key) {\n          case 'resourceSpans':\n            url = this.tracesURL\n            disabledUntil = this.sendingTracesDisabledUntil\n\n            updateDisabledUntil = (retryAfterDate: Date) => {\n              this.sendingTracesDisabledUntil = retryAfterDate\n            }\n            break\n          case 'resourceLogs':\n            url = this.logsURL\n            disabledUntil = this.sendingLogsDisabledUntil\n            updateDisabledUntil = (retryAfterDate: Date) => {\n              this.sendingLogsDisabledUntil = retryAfterDate\n            }\n            break\n          default:\n            break\n        }\n\n        if (disabledUntil && disabledUntil > new Date(Date.now())) {\n          this.logWarn(\n            `Dropping transport item due to too many requests. Backoff until ${disabledUntil}`,\n          )\n          return undefined\n        }\n        this.logDebug(`Sending value: ${JSON.stringify(value)}`, `to ${url}`)\n\n        const body = JSON.stringify(value)\n\n        const { requestOptions, apiToken } = this.options\n        const { headers, ...restOfRequestOptions } = requestOptions ?? {}\n\n        this.promiseBuffer.add(() =>\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'x-api-token': apiToken,\n              ...(headers ?? {}),\n            },\n            body,\n            keepalive: true,\n            ...(restOfRequestOptions ?? {}),\n          })\n            .then(response => {\n              if (response.status === 429) {\n                updateDisabledUntil(this.getRetryAfterDate(response))\n                this.logWarn(`Too many requests, backing off until ${disabledUntil}`)\n              }\n\n              return response\n            })\n            .catch(error => {\n              this.logError('Failed sending payload to the receiver\\n', JSON.parse(body), error)\n            }),\n        )\n      }\n    } catch (error) {\n      this.logError(error)\n    }\n  }\n\n  override getIgnoreUrls(): Array<string | RegExp> {\n    const { tracesURL, logsURL } = this\n    return [tracesURL, logsURL].filter(Boolean)\n  }\n\n  private getRetryAfterDate(response: Response): Date {\n    const now = Date.now()\n    const retryAfterHeader = response.headers.get('Retry-After')\n\n    if (retryAfterHeader) {\n      const delay = Number(retryAfterHeader)\n\n      if (!Number.isNaN(delay)) {\n        return new Date(delay * 1000 + now)\n      }\n\n      const date = Date.parse(retryAfterHeader)\n\n      if (!Number.isNaN(date)) {\n        return new Date(date)\n      }\n    }\n\n    return new Date(now + this.rateLimitBackoffMs)\n  }\n}\n","import { type InternalLogger, TransportItemType } from '@grafana/faro-core'\nimport compare from 'just-compare'\n\nimport type { GetLabelsFromMeta, TransportItem } from '../types'\nimport {\n  getLogTransforms,\n  getTraceTransforms,\n  type LogsTransform,\n  type TraceTransform,\n} from './transform'\nimport type { QrynTransportPayload } from './types'\n\nexport class QrynPayload {\n  private resourceLogs = { streams: [] } as QrynTransportPayload['resourceLogs']\n\n  private resourceSpans = [] as QrynTransportPayload['resourceSpans']\n\n  private getLogTransforms: LogsTransform\n\n  private getTraceTransforms: TraceTransform\n\n  constructor(\n    private internalLogger: InternalLogger,\n    getLabelsFromMeta?: GetLabelsFromMeta,\n    transportItem?: TransportItem,\n  ) {\n    this.internalLogger = internalLogger\n\n    this.getLogTransforms = getLogTransforms(this.internalLogger, getLabelsFromMeta)\n    this.getTraceTransforms = getTraceTransforms(this.internalLogger)\n\n    if (transportItem) {\n      this.addResourceItem(transportItem)\n    }\n  }\n\n  getPayload(): QrynTransportPayload {\n    return {\n      resourceLogs: this.resourceLogs,\n      resourceSpans: this.resourceSpans,\n    } as const\n  }\n\n  addResourceItem(transportItem: TransportItem): void {\n    const { type } = transportItem\n\n    try {\n      switch (type) {\n        case TransportItemType.LOG:\n        case TransportItemType.EXCEPTION:\n        case TransportItemType.EVENT:\n        case TransportItemType.MEASUREMENT: {\n          const { toLogValue, toLogLabels } = this.getLogTransforms\n\n          const currentLogStream = toLogLabels(transportItem)\n\n          const existingResourceLogs = this.resourceLogs.streams.find(({ stream }) =>\n            compare(stream, currentLogStream),\n          )\n\n          if (existingResourceLogs) {\n            // Push the transportItem to the existing resource log\n            const logValue = toLogValue(transportItem)\n            if (logValue) existingResourceLogs.values.push(logValue)\n          } else {\n            // Push the transportItem to a new resource log\n            const logLabels = toLogLabels(transportItem)\n            const logValue = toLogValue(transportItem)\n\n            if (logLabels && logValue)\n              this.resourceLogs.streams.push({ stream: logLabels, values: [logValue] })\n          }\n\n          break\n        }\n        case TransportItemType.TRACE: {\n          const { toResourceSpan } = this.getTraceTransforms\n\n          this.resourceSpans.push(toResourceSpan(transportItem))\n          break\n        }\n        default:\n          this.internalLogger?.error(`Unknown TransportItemType: ${type}`)\n          break\n      }\n    } catch (error) {\n      this.internalLogger?.error(error)\n    }\n  }\n\n  static hasPayload(value: any): boolean {\n    if (value && value.streams && value.streams.length > 0) {\n      return true\n    }\n    if (Array.isArray(value) && value.length > 0) {\n      return true\n    }\n    return false\n  }\n}\n","/* eslint-disable consistent-return */\nimport {\n  type EventEvent,\n  type ExceptionEvent,\n  type InternalLogger,\n  type LogEvent,\n  LogLevel,\n  type MeasurementEvent,\n  type TransportItem,\n  TransportItemType,\n} from '@grafana/faro-core'\nimport {\n  SemanticResourceAttributes,\n  TelemetrySdkLanguageValues,\n} from '@opentelemetry/semantic-conventions'\n\nimport type { GetLabelsFromMeta, LogTransportItem, TraceTransportItem } from '../../types'\nimport { isAttribute, toAttribute } from '../attribute'\nimport { defaultLabels } from '../config'\nimport type { LogsTransform, LogValue, Resource, ResourceSpans, TraceTransform } from './types'\nimport { fmt } from './utils'\n\nexport function getLogTransforms(\n  internalLogger: InternalLogger,\n  getLabelsFromMeta: GetLabelsFromMeta = defaultLabels,\n): LogsTransform {\n  function toLogLogValue(payload: TransportItem<LogEvent>['payload']): LogValue {\n    const { timestamp, trace, message, context } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [\n      timeUnixNano.toString(),\n      fmt.stringify({\n        message,\n        context: JSON.stringify(context),\n        ...(trace && { traceId: trace.trace_id }),\n      }),\n    ]\n  }\n\n  function toErrorLogValue(payload: TransportItem<ExceptionEvent>['payload']): LogValue {\n    const { timestamp, trace, type, value, stacktrace } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [\n      timeUnixNano.toString(),\n      fmt.stringify({\n        type,\n        value,\n        stacktrace: JSON.stringify(stacktrace),\n        ...(trace && { traceId: trace.trace_id }),\n      }),\n    ]\n  }\n\n  function toEventLogValue(payload: TransportItem<EventEvent>['payload']): LogValue {\n    const { timestamp, trace, name, attributes, domain } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [\n      timeUnixNano.toString(),\n      fmt.stringify({\n        name,\n        attributes: JSON.stringify(attributes),\n        ...(domain && { domain }),\n        ...(trace && { traceId: trace.trace_id }),\n      }),\n    ]\n  }\n\n  function toMeasurementLogValue(payload: TransportItem<MeasurementEvent>['payload']): LogValue {\n    const { timestamp, trace, type, values } = payload\n    const timeUnixNano = toTimeUnixNano(timestamp)\n\n    return [\n      timeUnixNano.toString(),\n      fmt.stringify({\n        type,\n        values: JSON.stringify(values),\n        ...(trace && { traceId: trace.trace_id }),\n      }),\n    ]\n  }\n\n  function toLogValue(transportItem: LogTransportItem) {\n    const { type, payload } = transportItem\n    switch (type) {\n      case TransportItemType.LOG:\n        return toLogLogValue(payload)\n      case TransportItemType.EXCEPTION:\n        return toErrorLogValue(payload)\n      case TransportItemType.EVENT:\n        return toEventLogValue(payload)\n      case TransportItemType.MEASUREMENT:\n        return toMeasurementLogValue(payload)\n      default:\n        internalLogger?.error(`Unknown TransportItemType: ${type}`)\n        return undefined\n    }\n  }\n\n  function toLogLabels(transportItem: LogTransportItem) {\n    const { type, payload, meta } = transportItem\n    switch (type) {\n      case TransportItemType.LOG:\n        return {\n          level: payload.level,\n          ...getLabelsFromMeta(meta),\n        }\n      case TransportItemType.EXCEPTION:\n        return {\n          level: LogLevel.ERROR,\n          ...getLabelsFromMeta(meta),\n        }\n      case TransportItemType.EVENT:\n        return {\n          level: LogLevel.INFO,\n          ...getLabelsFromMeta(meta),\n        }\n      case TransportItemType.MEASUREMENT:\n        return {\n          level: LogLevel.INFO,\n          ...getLabelsFromMeta(meta),\n        }\n      default:\n        internalLogger?.error(`Unknown TransportItemType: ${type}`)\n        return undefined\n    }\n  }\n\n  function toTimeUnixNano(timestamp: string): number {\n    return Date.parse(timestamp) * 1e6\n  }\n\n  return { toLogValue, toLogLabels }\n}\n\n/**\n * Seems currently to be missing in the semantic-conventions npm package.\n * See: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#todos\n *\n * Attributes are as defined by the Otel docs\n */\nconst SemanticBrowserAttributes = {\n  BROWSER_BRANDS: 'browser.brands',\n  BROWSER_PLATFORM: 'browser.platform',\n  BROWSER_MOBILE: 'browser.mobile',\n  BROWSER_USER_AGENT: 'browser.user_agent',\n  BROWSER_LANGUAGE: 'browser.language',\n} as const\n\nexport function getTraceTransforms(_internalLogger: InternalLogger): TraceTransform {\n  function toResourceSpan(transportItem: TraceTransportItem): ResourceSpans {\n    const resource = toResource(transportItem)\n    const scopeSpans = transportItem.payload.resourceSpans?.[0]?.scopeSpans\n\n    return {\n      resource,\n      scopeSpans: scopeSpans ?? [],\n    }\n  }\n\n  return { toResourceSpan }\n}\n\n/**\n * Function borrowed from @grafana/transport-otlp-http package\n *\n * source: https://github.com/grafana/faro-web-sdk/blob/ddf9dcbbe188c7184e03558bb27443e00042d9d4/experimental/transport-otlp-http/src/payload/transform/transform.ts#L201\n *\n */\nfunction toResource(transportItem: TraceTransportItem): Readonly<Resource> {\n  const { browser, sdk, app } = transportItem.meta\n  return {\n    attributes: [\n      toAttribute(SemanticBrowserAttributes.BROWSER_MOBILE, browser?.mobile),\n      toAttribute(SemanticBrowserAttributes.BROWSER_USER_AGENT, browser?.userAgent),\n      toAttribute(SemanticBrowserAttributes.BROWSER_LANGUAGE, browser?.language),\n      toAttribute(SemanticBrowserAttributes.BROWSER_BRANDS, browser?.brands),\n      toAttribute('browser.os', browser?.os),\n      toAttribute('browser.name', browser?.name),\n      toAttribute('browser.version', browser?.version),\n\n      toAttribute(SemanticResourceAttributes.TELEMETRY_SDK_NAME, sdk?.name),\n      toAttribute(SemanticResourceAttributes.TELEMETRY_SDK_VERSION, sdk?.version),\n      sdk\n        ? toAttribute(\n            SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE,\n            TelemetrySdkLanguageValues.WEBJS,\n          )\n        : undefined,\n      toAttribute(SemanticResourceAttributes.SERVICE_NAME, app?.name),\n      toAttribute(SemanticResourceAttributes.SERVICE_VERSION, app?.version),\n      toAttribute(SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT, app?.environment),\n    ].filter(isAttribute),\n  }\n}\n","/* eslint-disable consistent-return */\nimport { isArray, isBoolean, isInt, isNumber, isObject, isString } from '@grafana/faro-core'\nimport type { IAnyValue, IKeyValue } from '@opentelemetry/otlp-transformer'\n\n/**\n * Code borrowed from @grafana/transport-otlp-http pacakage\n *\n * source: https://github.com/grafana/faro-web-sdk/blob/main/experimental/transport-otlp-http/src/payload/attribute/attributeUtils.ts\n */\n\nexport function toAttributeValue(value: unknown): IAnyValue {\n  if (isString(value)) {\n    return { stringValue: value }\n  }\n\n  if (isInt(value)) {\n    return { intValue: value }\n  }\n\n  if (isNumber(value)) {\n    return { doubleValue: value as number }\n  }\n\n  if (isBoolean(value)) {\n    return { boolValue: value }\n  }\n\n  if (isArray(value)) {\n    return { arrayValue: { values: value.map(toAttributeValue) } }\n  }\n\n  if (value instanceof Uint8Array) {\n    return { bytesValue: value }\n  }\n\n  if (isObject(value)) {\n    return {\n      kvlistValue: {\n        values: Object.entries(value)\n          .map(([attributeName, attributeValue]) => toAttribute(attributeName, attributeValue))\n          .filter(isAttribute),\n      },\n    }\n  }\n\n  return {}\n}\n\nexport function toAttribute(attributeName: string, attributeValue: any): IKeyValue | undefined {\n  if (attributeValue == null || attributeValue === '') {\n    return undefined\n  }\n\n  return {\n    key: attributeName,\n    value: toAttributeValue(attributeValue),\n  }\n}\n\nexport function isAttribute(item: any): item is IKeyValue {\n  return Boolean(item) && typeof item?.key === 'string' && typeof item?.value !== 'undefined'\n}\n","import { Meta } from '@grafana/faro-core'\n\nexport function defaultLabels(meta: Meta) {\n  return {\n    ...(meta.app && {\n      app: meta.app.name,\n      environment: meta.app.environment,\n      release: meta.app.release,\n    }),\n    ...(meta.browser && { browser_name: meta.browser.name }),\n    ...(meta.user && { user_id: meta.user.id }),\n  }\n}\n","function stringify(data: Record<string, string | number>) {\n  let line = ''\n\n  Object.keys(data).forEach(key => {\n    let value = ''\n    let isNull = false\n\n    if (data[key] == null) {\n      isNull = true\n      value = ''\n    } else {\n      value = data[key].toString()\n    }\n\n    const needsQuoting = value.indexOf(' ') > -1 || value.indexOf('=') > -1\n    const needsEscaping = value.indexOf('\"') > -1 || value.indexOf('\\\\') > -1\n\n    if (needsEscaping) value = value.replace(/[\"\\\\]/g, '\\\\$&')\n    if (needsQuoting) value = `\"${value}\"`\n    if (value === '' && !isNull) value = '\"\"'\n\n    line += `${key}=${value} `\n  })\n\n  return line.substring(0, line.length - 1)\n}\n\nexport const fmt = {\n  stringify,\n}\n"],"mappings":"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","names":["TransportItemType","TransportItemType"]}